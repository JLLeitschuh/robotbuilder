#header()

package ${package}.subsystems;
#set($subsystem = $helper.getByName($subsystem_name, $robot))

import ${package}.commands.*;
import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpiutil.math.MathUtil;

#@autogenerated_code("imports", "")
#parse("${exporter_path}Subsystem-imports.java")
#end

/**
 *
 */
public class #class($subsystem.name) extends PIDSubsystem {

#@autogenerated_code("constants", "    ")
#parse("${exporter_path}Subsystem-constants.java")
#end

#@autogenerated_code("declarations", "    ")
#parse("${exporter_path}PIDSubsystem-declarations.java")
#end

    // Initialize your subsystem here
    public #class($subsystem.name)() {
#@autogenerated_code("pid", "        ")
#parse("${exporter_path}PIDSubsystem-pid.java")
#end

#@autogenerated_code("constructors", "        ")
#parse("${exporter_path}Subsystem-constructors.java")
#end

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        super.periodic();

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    @Override
    public double getMeasurement() {
#@autogenerated_code("source", "        ")
#parse("${exporter_path}PIDSubsystem-source.java")
#end
    }

    @Override
    public void useOutput(double output, double setpoint) {
        output += setpoint*kF;
#@autogenerated_code("output", "        ")
#parse("${exporter_path}PIDSubsystem-output.java")
#end
    }

#@autogenerated_code("cmdpidgetters", "    ")
#parse("${exporter_path}Subsystem-pidgetters.java")
#end

}
