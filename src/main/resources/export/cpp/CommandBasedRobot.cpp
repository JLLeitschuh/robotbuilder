#header()

\#include "Robot.h"

\#include <hal/FRCUsageReporting.h>

\#include <frc2/command/CommandScheduler.h>
\#include <frc/SmartDashboard/SmartDashboard.h>

#@autogenerated_code("initialization", "	")
#parse("${exporter_path}CommandBasedRobot-initialization.cpp")
#end

void Robot::RobotInit() {
#@autogenerated_code("constructors", "	")
#parse("${exporter_path}CommandBasedRobot-constructors.cpp")
#end
	// Add commands to Autonomous Sendable Chooser
#@autogenerated_code("autonomous", "	")
#parse("${exporter_path}CommandBasedRobot-autonomous.cpp")
#end
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {}

void Robot::AutonomousInit() {
  m_autonomousCommand = m_container.GetAutonomousCommand();
	if (m_autonomousCommand != nullptr)
		m_autonomousCommand->Schedule();
}

void Robot::AutonomousPeriodic() {}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (m_autonomousCommand != nullptr){
		m_autonomousCommand->Cancel();
		m_autonomousCommand = nullptr;
	}
}

void Robot::TeleopPeriodic() {}

#ifndef RUNNING_FRC_TESTS
int main(int argc, char** argv) {return frc::StartRobot<Robot>();}
#endif