#header()

\#include "RobotContainer.h"

#@autogenerated_code("includes", "")
#parse("${exporter_path}OI-includes.h")
#end

#set($cmd = $robot.getProperty("Autonomous Command").getValue())

#foreach( $component in $components )
#if ($helper.exportsTo("OI", $component)
    && "#type($component)" != "Joystick" 
    && ("#constructor($component)" != "" || "#extra($component)" != ""))
        #constructor($component)
        ${Collections.reverse($commands)}
        #foreach ($command in $commands)
                #if($command.name == $component.getProperty("Command").value)
                        #set($params = $component.getProperty("Parameters").getValue())
                        #variable($component.name).$component.getProperty("When to Run").getValue()(#new_command_instantiation($component,$command,$params)#if($component.getProperty("Add Timeout").value == true).withTimeout($component.getProperty("Timeout").value));#else#if($command.getProperty("Add Timeout").value == true).withTimeout($command.getProperty("Timeout").value));#else);#end#end
                        
                #end
        #end
        
#end
#end
RobotContainer::RobotContainer() : m_autonomousCommand(
#foreach( $component in $components )
#if ($component.getBase().getType() == "Command"
     && $component.getProperty("Button on SmartDashboard").getValue())
        #if( $component.getProperty("Parameter presets").getValue().isEmpty() )
                #if ($component.getProperty("Requires").getValue() != "None")
(m_#required_subsystem($component))#if($component.getProperty("Add Timeout").value == true).withTimeout($component.getProperty("Timeout").value)#end){
               #end
        #end
#end
#end
    // Process operator interface input here.
#@autogenerated_code("constructors", "    ")
#parse("${exporter_path}OI-constructors.cpp")
#end
}

#@autogenerated_code("functions", "")
#parse("${exporter_path}OI-functions.cpp")
#end


frc2::Command* RobotContainer::GetAutonomousCommand() {
  // An example command will be run in autonomous
  return &m_autonomousCommand;
}