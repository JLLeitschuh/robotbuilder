
package robotbuilder.graph;

import java.awt.Color;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

import lombok.Getter;

import robotbuilder.CenteredDialog;
import robotbuilder.MainFrame;
import robotbuilder.ParameterEditorTable;
import robotbuilder.Utils;
import robotbuilder.data.CommandGroupEntry;
import robotbuilder.data.properties.ParameterSet;
import robotbuilder.data.properties.ParameterSetProperty;
import robotbuilder.data.properties.ParametersProperty;
import robotbuilder.data.properties.ValuedParameterDescriptor;

/**
 * A dialog for editing commands in a command group.
 *
 * @author Sam Carlberg
 */
public class CommandCellEditorDialog extends CenteredDialog {

    private final CommandGraph graph;

    /**
     * The command being edited.
     */
    @Getter
    private final CommandGroupEntry command;

    /**
     * The parameters of the command being edited; these are just for
     * convenience.
     */
    private final ParametersProperty parameters;
    private final List<ValuedParameterDescriptor> parameterList;
    private final ParameterSetProperty presetsProp;
    private final List<ParameterSet> presets;

    /**
     * Was the data saved?
     */
    private boolean didSave = false;

    public CommandCellEditorDialog(CommandGraph graph, CommandCell command) {
        super(MainFrame.getInstance(), command.getValue().getName());
        this.presetsProp = (ParameterSetProperty) command.getValue().getCommand().getProperty("Parameter presets");
        this.presets = presetsProp.getValue();
        this.graph = graph;
        this.command = Utils.deepCopy(command.getValue());
        parameters = this.command.getParameters();
        parameterList = (List<ValuedParameterDescriptor>) parameters.getValue();
        initComponents();
        parameterTable.setShowHorizontalLines(true);
        parameterTable.setShowVerticalLines(true);
        parameterTable.setRowHeight(25);
        parameterTable.setBackground(new Color(240, 240, 240));
        parameterTable.setGridColor(Color.BLACK);
        parameterList.forEach(param -> parameterTable.getModel().addRow(param.toArray()));
    }

    public void save() {
        // Save the parameters
        Vector<Vector> dataVector = parameterTable.getModel().getDataVector();
        List<ValuedParameterDescriptor> params = new ArrayList<>();
        dataVector.stream().forEach((dataRow) -> {
            String name = (String) dataRow.get(0);
            ValuedParameterDescriptor existing = parameters.getParameterByName(name);
            existing.setValue(dataRow.get(2));
            params.add(existing);
        });

        parameters.setValueAndUpdate(params);

        // Save the order
        command.setOrder((String) orderBox.getSelectedItem());

        // Save the graph
        graph.save();
        didSave = true;
    }

    public boolean didSave() {
        return didSave;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        orderLabel = new javax.swing.JLabel();
        orderBox = new javax.swing.JComboBox();
        presetLabel = new javax.swing.JLabel();
        presetsBox = new javax.swing.JComboBox();
        tableScrollPane = new javax.swing.JScrollPane();
        if (command.getCommand().getProperty("Requires") == null) {
            parameterTable = new ParameterEditorTable("None", new ArrayList<>());
        } else {
            String requires = (String) command.getCommand().getProperty("Requires").getValue();
            if (requires.equals("None")) {
                parameterTable = new ParameterEditorTable(requires, new ArrayList<>());
            } else {
                parameterTable = new ParameterEditorTable(requires,
                                                         (List) MainFrame.getInstance().getCurrentRobotTree()
                                                                .getComponentByName(requires).getProperty("Constants").getValue());
            }
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        saveButton.setText("Save and close");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        orderLabel.setText("Set order:");

        orderBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {CommandGroupEntry.PARALLEL, CommandGroupEntry.SEQUENTIAL}));
        orderBox.setSelectedItem(command.getOrder());

        presetLabel.setText("Apply preset:");

        presetsBox.setModel(new javax.swing.DefaultComboBoxModel(presets.stream()
            .map(ParameterSet::getName)
            .toArray(String[]::new)));

        presetsBox.setSelectedIndex(-1);

        presetsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetsBoxActionPerformed(evt);
            }
        });

        parameterTable.setModel((new DefaultTableModel(new String[]{"Name", "Type", "Value"}, 0) {
            Class[] types = new Class[]{
                String.class, String.class, Object.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return columnIndex == 2;
            }
        })
        );
        tableScrollPane.setViewportView(parameterTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton))
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(orderBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(orderLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(presetLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(presetsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderLabel)
                    .addComponent(orderBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(presetLabel)
                    .addComponent(presetsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
        dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void presetsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetsBoxActionPerformed
        int selected = presetsBox.getSelectedIndex();
        if (selected < 0) {
            return;
        }
        presetsBox.setSelectedIndex(-1);
        System.out.println("Setting to preset \"" + selected + "\"");
        ParameterSet preset = presets.get(selected);
        System.out.println("Preset: " + preset);
        if(preset != null) {
            List<ValuedParameterDescriptor> parameters = preset.getParameters();
            for (int i = 0; i < parameters.size(); i++) {
                parameterTable.setValueAt(parameters.get(i).getValue(), i, 2);
            }
        }
        repaint();
    }//GEN-LAST:event_presetsBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox orderBox;
    private javax.swing.JLabel orderLabel;
    private robotbuilder.ParameterEditorTable parameterTable;
    private javax.swing.JLabel presetLabel;
    private javax.swing.JComboBox presetsBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
}
