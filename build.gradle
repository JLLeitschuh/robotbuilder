plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
    id "com.jfrog.artifactory" version "4.24.14"
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '4.1.0'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id "com.github.johnrengelman.shadow" version "7.1.1"
    id "de.undercouch.download" version "4.1.1"
    id 'org.aim42.htmlSanityCheck' version '1.1.6'
}

wpilibVersioning.buildServerMode = project.hasProperty('buildServer')
wpilibVersioning.releaseMode = project.hasProperty('releaseMode')

repositories {
    mavenCentral()
}
if (project.hasProperty('releaseMode')) {
    wpilibRepositories.addAllReleaseRepositories(project)
} else {
    wpilibRepositories.addAllDevelopmentRepositories(project)
}

if (System.getenv()['RUN_AZURE_ARTIFACTORY_RELEASE'] != null) {
  artifactory {
    contextUrl = 'https://frcmaven.wpi.edu/artifactory' // base artifactory url
    publish {
      repository {
        if (project.hasProperty('releaseMode')) {
          repoKey = 'release'
        } else {
          repoKey = 'development'
        }
        username = System.getenv()['ARTIFACTORY_PUBLISH_USERNAME']
        password = System.getenv()['ARTIFACTORY_PUBLISH_PASSWORD']
        maven = true
      }
      defaults {
          publications ('maven')
      }
    }
    clientConfig.info.setBuildName('RobotBuilder')
  }
  publish.dependsOn artifactoryPublish
}

mainClassName = "robotbuilder.RobotBuilder"

wpilibVersioning.version.finalizeValue()

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

def downloadNewCommands = tasks.register('downloadNewCommands', Download) {
  src 'https://raw.githubusercontent.com/wpilibsuite/allwpilib/main/wpilibNewCommands/WPILibNewCommands.json'
  dest 'build/resources/main/export/vendordeps/WPILibNewCommands.json'
  overwrite true
}

check.dependsOn jacocoTestReport
check.dependsOn htmlSanityCheck

lombok {
    version = "1.18.20"
    sha256 = ""
}

compileJava {
    options.encoding = "UTF-8"
    dependsOn downloadNewCommands
}

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.velocity:velocity-engine-core:2.3'
    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-jdk14:1.7.32'
    implementation 'com.sun.activation:javax.activation:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.projectlombok:lombok:1.18.20'
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jar {
    manifest {
        attributes('Implementation-Title': 'RobotBuilder',
                    'Implementation-Version': wpilibVersioning.version.get(),
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': new Date(),
                    'Built-JDK': System.getProperty('java.version'))
    }
}

import org.aim42.htmlsanitycheck.check.*

htmlSanityCheck {
    sourceDir = new File( "src/main/resources/help" )

    // where to put results of sanityChecks...
    checkingResultsDir = new File( "$buildDir/reports/htmlchecks" )

    // fail build on errors?
    failOnErrors = false

    checkerClasses = [BrokenCrossReferencesChecker,
             BrokenHttpLinksChecker,
             DuplicateIdChecker,
             ImageMapChecker,
             MissingAltInImageTagsChecker,
             MissingLocalResourcesChecker]

}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(shadowJar) {
                classifier null
            }
            groupId 'edu.wpi.first.tools'
            artifactId 'RobotBuilder'
            version wpilibVersioning.version.get()
        }
    }
}

